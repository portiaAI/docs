name: Bump SDK Version

on:
  workflow_dispatch:  # Manual trigger
  repository_dispatch:  # Remote trigger
    types: [bump-sdk-version]

jobs:
  bump-sdk-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPLOY_PAT_TOKEN }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Get latest commit hash from portia-sdk-python
        id: get-latest-commit
        run: |
          LATEST_COMMIT=$(curl -s https://api.github.com/repos/portiaAI/portia-sdk-python/commits/main | jq -r '.sha')
          echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          echo "Latest commit hash: $LATEST_COMMIT"

      - name: Update pyproject.toml with latest commit hash
        run: |
          # Use the standalone script to update pyproject.toml
          uv run .github/scripts/update_sdk_version.py "${{ steps.get-latest-commit.outputs.latest_commit }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.DEPLOY_PAT_TOKEN }}
          branch: automated/bump-sdk-version-${{ steps.get-latest-commit.outputs.latest_commit }}
          title: "ðŸ¤– Automated: Bump SDK version to latest commit"
          body: |
            ## ðŸ¤– Automated SDK Version Bump
            
            This PR updates the portia-sdk-python dependency to the latest commit hash.
            
            **Latest commit:** `${{ steps.get-latest-commit.outputs.latest_commit }}`
            
            **Changes:**
            - Updated `pyproject.toml` to use the latest commit hash from portiaAI/portia-sdk-python
            
            ---
            *This PR was automatically generated by the bump-sdk-version workflow.*
          commit-message: "ðŸ¤– Bump SDK version to ${{ steps.get-latest-commit.outputs.latest_commit }}"
          delete-branch: false
          labels: |
            automated
            sdk-update

      - name: Wait for PR checks to complete
        id: wait-for-checks
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pull-request-number }}"
          
          if [ -z "$PR_NUMBER" ]; then
            echo "Error: PR number is empty. Cannot wait for checks."
            exit 1
          fi
          
          echo "Waiting for PR #$PR_NUMBER checks to complete..."
          
          # Wait for checks to start
          sleep 30
          
          # Check status every 30 seconds for up to 30 minutes
          for i in {1..60}; do
            # Get the PR's head SHA to check its status
            PR_HEAD_SHA=$(curl -s -H "Authorization: token ${{ secrets.DEPLOY_PAT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" | \
              jq -r '.head.sha')
            
            # Get detailed status checks
            STATUS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.DEPLOY_PAT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/$PR_HEAD_SHA/status")
            
            OVERALL_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.state')
            TOTAL_COUNT=$(echo "$STATUS_RESPONSE" | jq -r '.statuses | length')
            SUCCESS_COUNT=$(echo "$STATUS_RESPONSE" | jq -r '.statuses | map(select(.state == "success")) | length')
            PENDING_COUNT=$(echo "$STATUS_RESPONSE" | jq -r '.statuses | map(select(.state == "pending")) | length')
            FAILURE_COUNT=$(echo "$STATUS_RESPONSE" | jq -r '.statuses | map(select(.state == "failure" or .state == "error")) | length')
            
            echo "Check status: $OVERALL_STATUS (attempt $i/60)"
            echo "  Total checks: $TOTAL_COUNT, Success: $SUCCESS_COUNT, Pending: $PENDING_COUNT, Failed: $FAILURE_COUNT"
            
            # Show pending checks for debugging
            if [ "$PENDING_COUNT" -gt 0 ]; then
              echo "  Pending checks:"
              echo "$STATUS_RESPONSE" | jq -r '.statuses[] | select(.state == "pending") | "    - " + .context + " (" + .state + ")"'
            fi
            
            if [ "$OVERALL_STATUS" = "success" ] && [ "$PENDING_COUNT" -eq 0 ]; then
              echo "All checks passed!"
              echo "status=success" >> $GITHUB_OUTPUT
              break
            elif [ "$OVERALL_STATUS" = "failure" ] || [ "$FAILURE_COUNT" -gt 0 ]; then
              echo "Checks failed!"
              echo "status=failure" >> $GITHUB_OUTPUT
              break
            elif [ "$i" -eq 60 ]; then
              echo "Timeout waiting for checks to complete"
              echo "status=timeout" >> $GITHUB_OUTPUT
              break
            fi
            
            sleep 30
          done

      - name: Auto-merge PR if checks pass
        if: steps.wait-for-checks.outputs.status == 'success'
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pull-request-number }}"
          
          if [ -z "$PR_NUMBER" ]; then
            echo "Error: PR number is empty. Cannot merge PR."
            exit 1
          fi
          
          echo "Auto-merging PR #$PR_NUMBER..."
          
          # Wait a minute for GitHub's systems to fully update the mergeable state
          echo "Waiting 60 seconds for GitHub to update mergeable state..."
          sleep 60
          
          # Check if PR is mergeable before attempting to merge
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.DEPLOY_PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          MERGEABLE_STATUS=$(echo "$PR_INFO" | jq -r '.mergeable')
          MERGEABLE_STATE=$(echo "$PR_INFO" | jq -r '.mergeable_state')
          
          echo "PR mergeable status: $MERGEABLE_STATUS"
          echo "PR mergeable state: $MERGEABLE_STATE"
          
          # mergeable_state can be: clean, dirty, unstable, blocked
          # We can proceed if it's "clean" or "blocked" (blocked usually means required reviews, which --admin can bypass)
          if [ "$MERGEABLE_STATE" = "dirty" ]; then
            echo "Error: PR has merge conflicts that need to be resolved."
            echo "  mergeable_state: $MERGEABLE_STATE"
            exit 1
          elif [ "$MERGEABLE_STATE" = "unstable" ]; then
            echo "Error: Required status checks are still failing or in progress."
            echo "  mergeable_state: $MERGEABLE_STATE"
            exit 1
          elif [ "$MERGEABLE_STATE" = "blocked" ]; then
            echo "PR is blocked by branch protection rules (likely required reviews)."
            echo "  mergeable_state: $MERGEABLE_STATE"
            echo "  Proceeding with --admin flag to bypass protection rules..."
          elif [ "$MERGEABLE_STATE" != "clean" ]; then
            echo "Error: Unknown mergeable state: $MERGEABLE_STATE"
            exit 1
          else
            echo "PR is in clean state, ready to merge."
          fi
          
          # Use gh CLI for consistency with admin privileges to bypass branch protection with admin privileges to bypass branch protection
          gh pr merge $PR_NUMBER \
            --squash \
            --delete-branch \
            --admin \
            --subject "ðŸ¤– Merge: Bump SDK version to ${{ steps.get-latest-commit.outputs.latest_commit }}" \
            --body "Automated merge of SDK version bump"
          
          echo "PR #$PR_NUMBER merged successfully!"
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_PAT_TOKEN }}

      - name: Notify Slack on success
        if: steps.wait-for-checks.outputs.status == 'success'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: '${{ vars.SLACK_RUN_CHANNEL }}'
          slack-message: |
            âœ… *Docs SDK Version Bump Successful*
            
            The automated docs SDK version bump PR has been successfully merged.
            
            *PR:* <https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}|#${{ steps.create-pr.outputs.pull-request-number }}>
            *Latest Commit:* `${{ steps.get-latest-commit.outputs.latest_commit }}`
            *Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>
            
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Close PR and notify Slack on failure
        if: steps.wait-for-checks.outputs.status == 'failure' || steps.wait-for-checks.outputs.status == 'timeout'
        run: |
          PR_NUMBER="${{ steps.create-pr.outputs.pull-request-number }}"
          
          if [ -z "$PR_NUMBER" ]; then
            echo "Error: PR number is empty. Cannot close PR."
            exit 1
          fi
          
          echo "Closing failed PR #$PR_NUMBER..."
          
          # Close the PR with a comment explaining why
          gh pr close $PR_NUMBER \
            --delete-branch \
            --comment "This PR was automatically closed because the checks failed. Status: ${{ steps.wait-for-checks.outputs.status }}"
          
          echo "PR #$PR_NUMBER closed successfully"
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_PAT_TOKEN }}

      - name: Notify Slack on failure
        if: steps.wait-for-checks.outputs.status == 'failure' || steps.wait-for-checks.outputs.status == 'timeout'
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: '${{ vars.SLACK_RUN_CHANNEL }}'
          slack-message: |
            ðŸš¨ *Docs SDK Version Bump Failed*
            
            The automated docs SDK version bump PR has failed its checks.
            
            *PR:* <https://github.com/${{ github.repository }}/pull/${{ steps.create-pr.outputs.pull-request-number }}|#${{ steps.create-pr.outputs.pull-request-number }}>
            *Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>
            
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}